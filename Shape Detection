import cv2
import numpy as np

def stackImages(scale,imgArray):
    rows = len(imgArray)
    cols = len(imgArray[0])
    rowsAvailable = isinstance(imgArray[0], list)
    width = imgArray[0][0].shape[1]
    height = imgArray[0][0].shape[0]
    if rowsAvailable:
        for x in range ( 0, rows):
            for y in range(0, cols):
                if imgArray[x][y].shape[:2] == imgArray[0][0].shape [:2]:
                    imgArray[x][y] = cv2.resize(imgArray[x][y], (0, 0), None, scale, scale)
                else:
                    imgArray[x][y] = cv2.resize(imgArray[x][y], (imgArray[0][0].shape[1], imgArray[0][0].shape[0]), None, scale, scale)
                if len(imgArray[x][y].shape) == 2: imgArray[x][y]= cv2.cvtColor( imgArray[x][y], cv2.COLOR_GRAY2BGR)
        imageBlank = np.zeros((height, width, 3), np.uint8)
        hor = [imageBlank]*rows
        hor_con = [imageBlank]*rows
        for x in range(0, rows):
            hor[x] = np.hstack(imgArray[x])
        ver = np.vstack(hor)
    else:
        for x in range(0, rows):
            if imgArray[x].shape[:2] == imgArray[0].shape[:2]:
                imgArray[x] = cv2.resize(imgArray[x], (0, 0), None, scale, scale)
            else:
                imgArray[x] = cv2.resize(imgArray[x], (imgArray[0].shape[1], imgArray[0].shape[0]), None,scale, scale)
            if len(imgArray[x].shape) == 2: imgArray[x] = cv2.cvtColor(imgArray[x], cv2.COLOR_GRAY2BGR)
        hor= np.hstack(imgArray)
        ver = hor
    return ver

def getCountours(img):
    countours,hierarchy=cv2.findContours(img,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)
    for cnt in countours:
        area=cv2.contourArea(cnt)
        print(area)
        if area>500:
            cv2.drawContours(imgCountour, cnt, -1, (255, 0, 0), 3)  # here we detected all the countours & shapes
            perl=cv2.arcLength(cnt,True) #we get arc length
            approx=cv2.approxPolyDP(cnt,0.02*perl,True) # we get corner point location
            print(len(approx))
            objcorner=len(approx)

            x,y,w,h=cv2.boundingRect(approx) #draw the bounding box around the object what will be the x ,y ,width w & height h
            if objcorner ==3:objectType="Triangle"
            elif objcorner== 4:
                aspRation=w/float(h)
                if aspRation>0.95 and aspRation <1.05:
                    objectType='Sqaure'
                else :
                    objectType="Rectangle"
            elif objcorner>4:
                objectType="Circle"
            else:objectType='None'

            cv2.rectangle(imgCountour,(x,y),(x+w,y+h),(0,255,0),2) #draw the bounding box around the object what will be the x ,y ,width w & height h
            cv2.putText(imgCountour,objectType,
                        (x+(w//2)-10,y+(h//2)-10),cv2.FONT_HERSHEY_SIMPLEX,0.7,
                        (0,0,0),2)


            #categories the object whether it is circle , triangle or rectangle

path='resources/shapes.png'
img=cv2.imread(path)
imgCountour=img.copy()

imgGray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY) #convert our img into gray scale image
imgBlur=cv2.GaussianBlur(imgGray,(7,7),2)
imgCanny=cv2.Canny(imgBlur,50,50)
imgBlank=np.zeros_like(img)

getCountours(imgCanny) #calling function

imgStack=stackImages(0.7,([img,imgGray,imgBlur],
                          [imgCanny,imgCountour,imgBlank]))


cv2.imshow('Stack',imgStack)


cv2.waitKey(0)

